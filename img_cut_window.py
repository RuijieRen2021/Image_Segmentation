# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'img_cut.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import time
import cv2
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtCore import Qt

from Img_Segmentation import grabCut3, paddle_Image, poisson_blending, takephotos
from Img_Segmentation import Alpha_Blending

global imgNamepath
global flag


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("图像分割")
        # # 给MainWindow设置图标
        # MainWindow.setWindowIcon(QIcon(r'D:\\download\\xj.ico'))  # 路径错误找不到问题所在
        #
        # # 给MainWindow设置背景图片
        # palette = QPalette()
        # palette.setBrush(QPalette.Background, QBrush(QPixmap('D:\\python\\RRJ\\pycharmproject\\Practice\\chep2\\bdd'
        #                                                      '\\blue_bg.jpg')))
        # MainWindow.setPalette(palette)
        MainWindow.resize(1232, 852)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(10, 0, 1211, 791))
        self.widget.setStyleSheet("border:1px solid black;\n")
        self.widget.setObjectName("widget")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(0, 0, 1211, 101))
        self.label.setStyleSheet("font: 24pt \"Arial\";\n"
                                 "color:rgb(255, 170, 0);\n"
                                 "text-aligen:center;")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.widget)
        self.label_2.setGeometry(QtCore.QRect(260, 180, 431, 451))
        self.label_2.setStyleSheet("background-color:rgb(255, 255, 255);")
        self.label_2.setText("原始图像显示区")
        self.label_2.setAlignment(Qt.AlignCenter)
        self.label_2.setStyleSheet("font: 14pt \"Arial\";\n")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.widget)
        self.label_3.setGeometry(QtCore.QRect(750, 180, 431, 451))
        self.label_3.setStyleSheet("background-color:rgb(255, 255, 255);")
        self.label_3.setText("结果显示区")
        self.label_3.setAlignment(Qt.AlignCenter)
        self.label_3.setStyleSheet("font: 14pt \"Arial\";\n")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.widget)
        self.label_4.setGeometry(QtCore.QRect(370, 130, 181, 41))
        self.label_4.setStyleSheet("border:0px;\n"
                                   "font: 14pt \"Arial\";\n")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.widget)
        self.label_5.setGeometry(QtCore.QRect(890, 130, 131, 41))
        self.label_5.setStyleSheet("font: 14pt \"Arial\";\n"
                                   "border:0px;")
        self.label_5.setObjectName("label_5")
        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.setGeometry(QtCore.QRect(261, 660, 150, 51))
        self.pushButton.setStyleSheet("font: 12pt \"Arial\";")
        self.pushButton.setObjectName("pushButton")
        self.lineEdit = QtWidgets.QLineEdit(self.widget)
        self.lineEdit.setGeometry(QtCore.QRect(410, 660, 771, 51))
        self.lineEdit.setStyleSheet("font: 12pt \"Arial\";\n")
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton_2 = QtWidgets.QPushButton(self.widget)
        self.pushButton_2.setGeometry(QtCore.QRect(261, 720, 150, 51))
        self.pushButton_2.setStyleSheet("font: 12pt \"Arial\";")
        self.pushButton_2.setObjectName("pushButton_2")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.widget)
        self.lineEdit_2.setGeometry(QtCore.QRect(410, 720, 771, 51))
        self.lineEdit_2.setStyleSheet("font: 12pt \"Arial\";\n")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_6 = QtWidgets.QLabel(self.widget)
        self.label_6.setGeometry(QtCore.QRect(0, 100, 221, 691))
        self.label_6.setText("")
        self.label_6.setObjectName("label_6")
        self.pushButton_3 = QtWidgets.QPushButton(self.widget)
        self.pushButton_3.setGeometry(QtCore.QRect(30, 200, 151, 51))
        self.pushButton_3.setStyleSheet("font: 14pt \"Arial\";")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.widget)
        self.pushButton_4.setGeometry(QtCore.QRect(30, 290, 151, 51))
        self.pushButton_4.setStyleSheet("font: 14pt \"Arial\";\n")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.widget)
        self.pushButton_5.setGeometry(QtCore.QRect(30, 460, 151, 51))
        self.pushButton_5.setStyleSheet("font: 14pt \"Arial\";")
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(self.widget)
        self.pushButton_6.setGeometry(QtCore.QRect(30, 550, 151, 51))
        self.pushButton_6.setStyleSheet("font: 14pt \"Arial\";")
        self.pushButton_6.setObjectName("pushButton_6")
        # self.comboBox = QtWidgets.QComboBox(self.widget)
        # self.comboBox.setGeometry(QtCore.QRect(30, 640, 151, 51))
        # self.comboBox.setStyleSheet("font: 14pt \"Arial\";")
        # self.comboBox.setObjectName("comboBox")
        # self.comboBox.addItem("")
        # self.comboBox.setItemText(0, "背景替换")
        # self.comboBox.addItem("红色")
        # self.comboBox.addItem("蓝色")
        # self.comboBox.addItem("白色")
        # self.comboBox.addItem("绿色")
        # self.comboBox.addItem("自定义")
        self.pushButton_7 = QtWidgets.QPushButton(self.widget)
        self.pushButton_7.setGeometry(QtCore.QRect(30, 370, 151, 51))
        self.pushButton_7.setStyleSheet("font: 14pt \"Arial\";")
        self.pushButton_7.setObjectName("pushButton_7")

        self.pushButton_8 = QtWidgets.QPushButton(self.widget)
        self.pushButton_8.setGeometry(QtCore.QRect(30, 640, 151, 51))
        self.pushButton_8.setStyleSheet("font: 14pt \"Arial\";")
        self.pushButton_8.setObjectName("pushButton_8")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1232, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # 按钮关联函数
        self.pushButton.clicked.connect(self.openImage)
        self.pushButton_3.clicked.connect(self.start_paddle_Image)
        self.pushButton_4.clicked.connect(self.start_grabcut)
        self.pushButton_5.clicked.connect(self.saveImage)
        self.pushButton_6.clicked.connect(self.img_poisson_blend)
        # self.comboBox.currentIndexChanged.connect(self.selectionchange)
        self.pushButton_7.clicked.connect(self.take_pictures)
        self.pushButton_8.clicked.connect(self.alpha_blending_img)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "图像分割"))
        self.label.setText(_translate("MainWindow", "                                     图像分割及图像融合系统"))
        self.label_4.setText(_translate("MainWindow", "     original Image"))
        self.label_5.setText(_translate("MainWindow", "result Image"))
        self.pushButton.setText(_translate("MainWindow", "选择图片"))
        self.pushButton_2.setText(_translate("MainWindow", "运行时间"))
        self.pushButton_3.setText(_translate("MainWindow", "开始分割"))
        self.pushButton_4.setText(_translate("MainWindow", "grabCut"))
        self.pushButton_5.setText(_translate("MainWindow", "保   存"))
        self.pushButton_6.setText(_translate("MainWindow", "图像融合"))
        # self.comboBox.setItemText(1, _translate("MainWindow", "红色"))
        # self.comboBox.setItemText(2, _translate("MainWindow", "蓝色"))
        # self.comboBox.setItemText(3, _translate("MainWindow", "白色"))
        # self.comboBox.setItemText(4, _translate("MainWindow", "绿色"))
        # self.comboBox.setItemText(5, _translate("MainWindow", "自定义"))
        self.pushButton_7.setText(_translate("MainWindow", "拍摄图像"))
        self.pushButton_8.setText(_translate("MainWindow", "背景替换"))

    # 选择本地图片上传
    def openImage(self):
        global imgNamepath  # 这里为了方便别的地方引用图片路径，将其设置为全局变量
        # 弹出一个文件选择框，第一个返回值imgName记录选中的文件路径+文件名，第二个返回值imgType记录文件的类型
        # QFileDialog就是系统对话框的那个类第一个参数是上下文，第二个参数是弹框的名字，第三个参数是默认打开的路径，第四个参数是需要的格式
        imgNamepath, imgType = QFileDialog.getOpenFileName(self.centralwidget, "选择图片",
                                                           "D:\\python\\RRJ\\pycharmproject\\Practice\\chep2\\bdd2",
                                                           "*.jpg;;*.png;;All Files(*)")
        # 通过文件路径获取图片文件，并设置图片长宽为label控件的长、宽
        # img = QtGui.QPixmap(imgNamepath).scaled(self.label_2.width(), self.label_2.height())
        imgShow = QtGui.QPixmap(imgNamepath)
        self.label_2.setScaledContents(True)
        self.label_2.setPixmap(imgShow)
        # 显示所选图片的路径
        self.lineEdit.setText(imgNamepath)

    # 执行分割
    def start_paddle_Image(self):
        tstart = time.time()
        global flag
        flag = 1
        pdcut_img_path = paddle_Image.paddle_cut_Image(imgNamepath)
        pdcut_img = QPixmap(pdcut_img_path)
        self.label_3.setScaledContents(True)
        self.label_3.setPixmap(pdcut_img)
        tend = time.time()
        result = tend - tstart
        self.lineEdit_2.setText(str('%.3f' % float(result)) + 's')

    # grabCut_img
    def start_grabcut(self):
        tstart = time.time()
        global flag
        flag = 2
        gb_img_path = grabCut3.main(imgNamepath)
        # print(pdcut_img_path)
        gb_img = QPixmap(gb_img_path)
        self.label_3.setScaledContents(True)
        self.label_3.setPixmap(gb_img)
        tend = time.time()
        result = tend - tstart
        self.lineEdit_2.setText(str('%.3f' % float(result)) + 's')

    # 保存图片到本地(第二种方式:首先提取相对应Qlabel中的图片，然后打开一个保存文件的弹出框，最后保存图片到选中的路径)
    def saveImage(self):
        # 提取Qlabel中的图片
        img = self.label_3.pixmap().toImage()
        # print(type(img))
        fpath, ftype = QFileDialog.getSaveFileName(self.centralwidget, "保存图片", "d:\\", "*.png;;*.jpg;;All Files(*)")
        img.save(fpath)

    # 图像泊松融合
    def img_poisson_blend(self):
        tstart = time.time()
        self.openImage()
        if self.label_3.text() == "结果显示区":
            src_img = cv2.imread(imgNamepath)
        else:
            # 提取Qlabel中的图片
            src_img = self.label_3.pixmap().toImage()
            # 判断路径是否存在，如果不存在则新建
            path = "D:\\python\\RRJ\\pycharmproject\\Image_Segmentation\\PyQtImgZCQ\\"
            if not os.path.exists(path):
                os.mkdir(path)
            # 因为不知道怎么将<class 'numpy.ndarray'>转换为<class 'PyQt5.QtGui.QPixmap'>类型，因此采用暂存再读出的方式
            path = os.path.join(path, 'ZC.png')
            src_img.save(path)
            src_img = cv2.imread(path)
        # src_img = cv2.cvtColor(src_img,cv2.COLOR_RGB2BGR)
        poisson_img_path = poisson_blending.img_Poisson_Blending(src_img, imgNamepath)
        # pyqt5从路径读取图片
        imgShow = QPixmap(poisson_img_path)
        self.label_3.setScaledContents(True)
        self.label_3.setPixmap(imgShow)
        tend = time.time()
        result = tend - tstart
        self.lineEdit_2.setText(str('%.3f' % float(result)) + 's')

    # 背景替换，下拉列表框
    # def selectionchange(self, i):
    #     self.comboBox.setText(self.comboBox.currentText())
    #     if i == '1':
    #         print("编号为1")
    #     else:
    #         print('其他')

    # 拍摄照片
    def take_pictures(self):
        global imgNamepath
        imgNamepath = takephotos.take_photos()
        print(imgNamepath)
        show_take_img = QPixmap(imgNamepath)
        self.label_2.setScaledContents(True)
        self.label_2.setPixmap(show_take_img)

    # 背景替换
    def alpha_blending_img(self):
        tstart = time.time()
        self.openImage()
        fore_imgpath = ''
        if self.label_3.text() == "结果显示区":
            src_img = cv2.imread(imgNamepath)
        else:
            # 提取Qlabel中的图片
            src_img = self.label_3.pixmap().toImage()
            # 判断路径是否存在，如果不存在则新建
            path = "D:\\python\\RRJ\\pycharmproject\\Image_Segmentation\\PyQtImgZCQ\\"
            if not os.path.exists(path):
                os.mkdir(path)
            # 因为不知道怎么将<class 'numpy.ndarray'>转换为<class 'PyQt5.QtGui.QPixmap'>类型，因此采用暂存再读出的方式
            path = os.path.join(path, 'ZC.png')
            src_img.save(path)
            fore_imgpath = path
            # src_img = cv2.imread(path)
        Alpha_img_path = ''
        if flag == 1:
            Alpha_img_path = Alpha_Blending.alpha_blending(fore_imgpath, imgNamepath)
        if flag == 2:
            Alpha_img_path = Alpha_Blending.alpha_blending2(fore_imgpath, imgNamepath)
        # pyqt5从路径读取图片
        imgShow = QPixmap(Alpha_img_path)
        # Alpha_img_path = QImage(Alpha_img_path, Alpha_img_path.shape[1], Alpha_img_path.shape[0],
        # QtGui.QImage.Format_RGB888).rgbSwapped() self.label_0.setPixmap(QPixmap(Alpha_img_path).scaled(
        # self.label_0.size()))

        self.label_3.setScaledContents(True)
        self.label_3.setPixmap(imgShow)
        tend = time.time()
        result = tend - tstart
        self.lineEdit_2.setText(str('%.3f' % float(result)) + 's')
